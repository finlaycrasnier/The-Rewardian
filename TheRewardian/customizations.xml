<ImportExportXml xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Entities></Entities>
  <Roles></Roles>
  <Workflows>
    <Workflow WorkflowId="{4086e5cc-1eeb-429b-adbf-07b6e74db26d}" Name="The Rewardian">
      <JsonFileName>/Workflows/TheRewardian-4086E5CC-1EEB-429B-ADBF-07B6E74DB26D.json</JsonFileName>
      <Type>1</Type>
      <Subprocess>0</Subprocess>
      <Category>6</Category>
      <Mode>0</Mode>
      <Scope>4</Scope>
      <OnDemand>0</OnDemand>
      <TriggerOnCreate>0</TriggerOnCreate>
      <TriggerOnDelete>0</TriggerOnDelete>
      <AsyncAutodelete>0</AsyncAutodelete>
      <SyncWorkflowLogOnFailure>0</SyncWorkflowLogOnFailure>
      <StateCode>1</StateCode>
      <StatusCode>2</StatusCode>
      <RunAs>1</RunAs>
      <IsTransacted>1</IsTransacted>
      <IntroducedVersion>1.0</IntroducedVersion>
      <IsCustomizable>1</IsCustomizable>
      <BusinessProcessType>0</BusinessProcessType>
      <UIFlowType>2</UIFlowType>
      <IsCustomProcessingStepAllowedForOtherPublishers>1</IsCustomProcessingStepAllowedForOtherPublishers>
      <Metadata>{"isvalid":true,"schemaVersion":"ROBIN_20211012","containsActiveConnections":false}</Metadata>
      <Inputs>{"schema":null}</Inputs>
      <Outputs>{"schema":null}</Outputs>
      <Dependencies>{"childFlows":[]}</Dependencies>
      <ConnectionReferences>[]</ConnectionReferences>
      <Definition>"@@ConnectionString: ''\r\n@@Type: 'Local'\r\n@@DesktopType: 'local'\r\n@@DisplayName: 'Local computer'\r\nIMPORT 'controlRepo.appmask' AS appmask\r\nIMPORT 'imageRepo.imgrepo' AS imgrepo\r\n@SENSITIVE: []\r\n# We start by launching the Excel file that is to be used for information on how the bot runs.\r\nDisplay.ShowMessageDialog.ShowMessage Title: $'''Associated Excel File''' Message: $'''Please select the accompanying sheet on the following file dialog''' Icon: Display.Icon.Information Buttons: Display.Buttons.OK DefaultButton: Display.DefaultButton.Button1 IsTopMost: False\r\nDisplay.SelectFileDialog.SelectFile Title: $'''Please select the accompanying sheet''' IsTopMost: False CheckIfFileExists: False SelectedFile=&gt; AccompanySheetAddress\r\n# The code below is an alternative if the bot is failing to launch the excel. You can manually launch the file, enable the below line (and disable above lines) and re-run the bot.\r\nDISABLE Excel.Attach DocumentName: $'''The Ultimate Cutter Accompanying Sheet.xlsx''' Instance=&gt; AccompanySheetAddress\r\nExcel.LaunchExcel.LaunchAndOpenUnderExistingProcess Path: AccompanySheetAddress Visible: True ReadOnly: False Instance=&gt; AccompanySheet\r\n# We run a subflow (for tidiness) to gather settings that the bot will use.\r\nCALL Bot_Settings\r\n# If enabled in settings within the accompanying sheet, we will handle and cut the files.\r\nIF RunHandler = $'''ENABLED''' THEN\r\n    CALL Handler\r\nEND\r\n# If the handler is disabled, we do not have the files saved in a list. Here we gather the files so we can run the cutter or password subflows.\r\nIF RunHandler = $'''DISABLED''' THEN\r\n    Variables.ClearList List: FileNames\r\n    Folder.GetFiles Folder: SavePath FileFilter: $'''*''' IncludeSubfolders: False FailOnAccessDenied: True SortBy1: Folder.SortBy.NoSort SortDescending1: False SortBy2: Folder.SortBy.NoSort SortDescending2: False SortBy3: Folder.SortBy.NoSort SortDescending3: False Files=&gt; FileNamesXLSX\r\n    LOOP FOREACH FileName IN FileNamesXLSX\r\n        # When the bot 'Get[s] files in folder', Power Automate stores the files ending with '.xlsx'. We have to remove '.xlsx' from the end part of the file name so the bot can recognise it later.\r\n        Text.Reverse Text: FileName ReversedText=&gt; ReversedText\r\n        Text.GetSubtext.GetSubtextFrom Text: ReversedText CharacterPosition: 5 Subtext=&gt; Subtext\r\n        # We also have to remove the file path, as we add it back later by use of a variable when launching the file.\r\n        Text.CropText.CropTextBeforeFlag Text: Subtext ToFlag: $'''\\\\''' IgnoreCase: False CroppedText=&gt; CroppedText\r\n        Text.Reverse Text: CroppedText ReversedText=&gt; ReversedText\r\n        Variables.AddItemToList Item: ReversedText List: FileNames\r\n    END\r\nEND\r\nIF RunCutter = $'''ENABLED''' THEN\r\n    CALL Cutter\r\nEND\r\nIF RunPassword = $'''ENABLED''' THEN\r\n    CALL Password\r\nEND\r\nFUNCTION Bot_Settings GLOBAL\r\n    Excel.SetActiveWorksheet.ActivateWorksheetByName Instance: AccompanySheet Name: $'''User Guide and Settings'''\r\n    # Reading Settings.\r\n    Excel.ReadFromExcel.ReadCell Instance: AccompanySheet StartColumn: 2 StartRow: 14 ReadAsText: False CellValue=&gt; RunHandler\r\n    Excel.ReadFromExcel.ReadCell Instance: AccompanySheet StartColumn: 2 StartRow: 17 ReadAsText: False CellValue=&gt; RunCutter\r\n    Excel.ReadFromExcel.ReadCell Instance: AccompanySheet StartColumn: 2 StartRow: 29 ReadAsText: False CellValue=&gt; IdentifierRead\r\n    Excel.ReadFromExcel.ReadCell Instance: AccompanySheet StartColumn: 2 StartRow: 20 ReadAsText: False CellValue=&gt; RunPassword\r\n    Excel.ReadFromExcel.ReadCell Instance: AccompanySheet StartColumn: 2 StartRow: 26 ReadAsText: False CellValue=&gt; SeperationKey\r\n    Excel.ReadFromExcel.ReadCell Instance: AccompanySheet StartColumn: 2 StartRow: 23 ReadAsText: False CellValue=&gt; RunAutoLocate\r\n    Excel.ReadFromExcel.ReadCell Instance: AccompanySheet StartColumn: 2 StartRow: 32 ReadAsText: False CellValue=&gt; ProtectWorkbookPassword\r\n    Excel.ReadFromExcel.ReadCell Instance: AccompanySheet StartColumn: 2 StartRow: 33 ReadAsText: False CellValue=&gt; ProtectSheetsPassword\r\n    Excel.ReadFromExcel.ReadCell Instance: AccompanySheet StartColumn: 2 StartRow: 34 ReadAsText: False CellValue=&gt; EncryptWorkbookPassword\r\n    Excel.ReadFromExcel.ReadCell Instance: AccompanySheet StartColumn: $'''J''' StartRow: 38 ReadAsText: False CellValue=&gt; SavePath\r\n    # Getting file locations.\r\n    IF RunCutter = $'''ENABLED''' THEN\r\n        IF RunAutoLocate = $'''DISABLED''' THEN\r\n            Display.ShowMessageDialog.ShowMessage Title: $'''Select Email Template File''' Message: $'''Please select the master file on the following file dialog.''' Icon: Display.Icon.Information Buttons: Display.Buttons.OK DefaultButton: Display.DefaultButton.Button1 IsTopMost: False\r\n            Display.SelectFileDialog.SelectFile Title: $'''Master File''' IsTopMost: False CheckIfFileExists: False SelectedFile=&gt; MasterFilePath\r\n        ELSE\r\n            Excel.ReadFromExcel.ReadCell Instance: AccompanySheet StartColumn: $'''J''' StartRow: 40 ReadAsText: False CellValue=&gt; MasterFilePathMinusName\r\n            Excel.ReadFromExcel.ReadCell Instance: AccompanySheet StartColumn: $'''J''' StartRow: 42 ReadAsText: False CellValue=&gt; MasterFileName\r\n            SET MasterFilePath TO $'''%MasterFilePathMinusName%\\\\%MasterFileName%.xlsx'''\r\n        END\r\n    END\r\n    # Getting sheet list for cutter (if enabled).\r\n    IF RunCutter = $'''ENABLED''' THEN\r\n        # We get a list of sheets to cut.\r\n        Variables.CreateNewList List=&gt; Sheets\r\n        Excel.GetFirstFreeRowOnColumn Instance: AccompanySheet Column: $'''B''' FirstFreeRowOnColumn=&gt; FirstFreeRow\r\n        LOOP Row FROM 58 TO FirstFreeRow - 1 STEP 1\r\n            Excel.ReadFromExcel.ReadCell Instance: AccompanySheet StartColumn: 2 StartRow: Row ReadAsText: False CellValue=&gt; ExcelData\r\n            Variables.AddItemToList Item: ExcelData List: Sheets\r\n        END\r\n        # We get a list of columns to hide after cutting.\r\n        Variables.CreateNewList List=&gt; ColumnsToHide\r\n        Excel.GetFirstFreeRowOnColumn Instance: AccompanySheet Column: $'''J''' FirstFreeRowOnColumn=&gt; FirstFreeRow\r\n        LOOP Row FROM 58 TO FirstFreeRow - 1 STEP 1\r\n            Excel.ReadFromExcel.ReadCell Instance: AccompanySheet StartColumn: $'''J''' StartRow: Row ReadAsText: False CellValue=&gt; ExcelData\r\n            Excel.ReadFromExcel.ReadCell Instance: AccompanySheet StartColumn: $'''L''' StartRow: Row ReadAsText: False CellValue=&gt; ExcelData2\r\n            # We join the sheet and column with a $ to seperate them later without risk of changing an actual sheet name.\r\n            SET ExcelData TO $'''%ExcelData%$%ExcelData2%'''\r\n            Variables.AddItemToList Item: ExcelData List: ColumnsToHide\r\n        END\r\n        # We get a list of sheets to hide after cutting.\r\n        Variables.CreateNewList List=&gt; SheetsToHide\r\n        Excel.GetFirstFreeRowOnColumn Instance: AccompanySheet Column: $'''F''' FirstFreeRowOnColumn=&gt; FirstFreeRow\r\n        LOOP Row FROM 58 TO FirstFreeRow - 1 STEP 1\r\n            Excel.ReadFromExcel.ReadCell Instance: AccompanySheet StartColumn: $'''F''' StartRow: Row ReadAsText: False CellValue=&gt; ExcelData\r\n            Variables.AddItemToList Item: ExcelData List: SheetsToHide\r\n        END\r\n    END\r\n    IF RunPassword = $'''ENABLED''' THEN\r\n        # We get a list of sheets to protect.\r\n        Variables.CreateNewList List=&gt; SheetsToProtect\r\n        Excel.GetFirstFreeRowOnColumn Instance: AccompanySheet Column: $'''N''' FirstFreeRowOnColumn=&gt; FirstFreeRow\r\n        LOOP Row FROM 58 TO FirstFreeRow - 1 STEP 1\r\n            Excel.ReadFromExcel.ReadCell Instance: AccompanySheet StartColumn: 2 StartRow: Row ReadAsText: False CellValue=&gt; ExcelData\r\n            Variables.AddItemToList Item: ExcelData List: SheetsToProtect\r\n        END\r\n    END\r\n    # If the cutter is enabled, we assemble the macro\r\n    IF RunCutter = $'''ENABLED''' THEN\r\n        Excel.LaunchExcel.LaunchAndOpenUnderExistingProcess Path: MasterFilePath Visible: True ReadOnly: False Instance=&gt; MacroCreationInstance\r\n        SET Macro TO $'''Sub Sheet_Cutter()\r\n    Dim Firstrow As Long\r\n    Dim Lastrow As Long\r\n    Dim Lrow As Long\r\n    Dim CalcMode As Long\r\n    Dim ViewMode As Long\r\n    Dim Value As Long\r\n\r\nvCol = Application.InputBox(\\\"What Cost Centre \\\" &amp; vbLf _\r\n        &amp; vbLf &amp; \\\"(2000 etc)\\\", \\\"Which Cost Centre?\\\", 1, Type:=1)\r\n   If vCol = 0 Then Exit Sub\r\n\r\n    With Application\r\n        CalcMode = .Calculation\r\n        .Calculation = xlCalculationManual\r\n        .ScreenUpdating = False\r\n    End With\r\n  '''\r\n        LOOP FOREACH Sheet IN Sheets\r\n            Excel.SetActiveWorksheet.ActivateWorksheetByName Instance: MacroCreationInstance Name: Sheet\r\n            Excel.FindAndReplace.FindSingle Instance: MacroCreationInstance TextToFind: IdentifierRead MatchCase: False MatchEntireCellContents: True SearchBy: Excel.SearchOrder.Rows FoundColumnIndex=&gt; MacroColumn FoundRowIndex=&gt; MacroRow\r\n            Excel.GetFirstFreeColumnRow Instance: MacroCreationInstance FirstFreeRow=&gt; MacroFreeRow\r\n            Excel.WriteToExcel.WriteCell Instance: AccompanySheet Value: $'''=SUBSTITUTE(ADDRESS(1,%MacroColumn%,4),\\\"1\\\",\\\"\\\")''' Column: $'''J''' Row: 54\r\n            Excel.ReadFromExcel.ReadCell Instance: AccompanySheet StartColumn: $'''J''' StartRow: 54 ReadAsText: False CellValue=&gt; MacroColumn\r\n            SET MacroModule TO $'''\\'use the ActiveSheet but you can replace this with\r\n    \\'Sheets(\\\"MySheet\\\")if you want\r\n    With Sheets(\\\"%Sheet%\\\")\r\n\r\n        \\'We select the sheet so we can change the window view\r\n        .Select\r\n\r\n        \\'If you are in Page Break Preview Or Page Layout view go\r\n        \\'back to normal view, we do this for speed\r\n        ViewMode = ActiveWindow.View\r\n        ActiveWindow.View = xlNormalView\r\n\r\n        \\'Turn off Page Breaks, we do this for speed\r\n        .DisplayPageBreaks = False\r\n\r\n        \\'Set the first and last row to loop through\r\n        Firstrow = %MacroRow + 1%\r\n        Lastrow = %MacroFreeRow - 1%\r\n\r\n        \\'We loop from Lastrow to Firstrow (bottom to top)\r\n        For Lrow = Lastrow To Firstrow Step -1\r\n\r\n            \\'We check the values in the A column in this example\r\n            With .Cells(Lrow, \\\"%MacroColumn%\\\")\r\n\r\n                If .Value &lt;&gt; \\\"0\\\" Then\r\n\r\n                    If .Value &lt;&gt; vCol Then .EntireRow.Delete\r\n                    \\'This will delete each row with the Value not Vcol\r\n                    \\'in Column selected, case sensitive.\r\n\r\n                End If\r\n\r\n            End With\r\n\r\n        Next Lrow\r\n\r\n    End With'''\r\n            SET Macro TO $'''%Macro%\r\n%MacroModule%'''\r\n        END\r\n        SET Macro TO $'''%Macro%\r\n    With Application\r\n        .ScreenUpdating = True\r\n        .Calculation = CalcMode\r\n        End With\r\nEnd Sub'''\r\n        Clipboard.SetText Text: Macro\r\n        Excel.CloseExcel.Close Instance: MacroCreationInstance\r\n    END\r\n    # Assembling file names\r\n    Variables.CreateNewList List=&gt; FileNames\r\n    Excel.SetActiveWorksheet.ActivateWorksheetByName Instance: AccompanySheet Name: $'''BotAdmin'''\r\n    Excel.GetFirstFreeColumnRow Instance: AccompanySheet FirstFreeColumn=&gt; FirstFreeColumn FirstFreeRow=&gt; FirstFreeRow\r\n    LOOP Row FROM 2 TO FirstFreeRow - 1 STEP 1\r\n        LOOP Column FROM 1 TO FirstFreeColumn - 1 STEP 1\r\n            Excel.ReadFromExcel.ReadCell Instance: AccompanySheet StartColumn: Column StartRow: Row ReadAsText: False CellValue=&gt; ExcelData\r\n            SET FileName TO $'''%FileName%%SeperationKey%%ExcelData%'''\r\n        END\r\n        Text.GetSubtext.GetSubtextFrom Text: FileName CharacterPosition: 1 Subtext=&gt; FileName\r\n        Variables.AddItemToList Item: FileName List: FileNames\r\n        SET FileName TO $'''%''%'''\r\n    END\r\n    # If the cutter is enabled, we gather the identifiers used to cut data (e.g. the branch code)\r\n    IF RunCutter = $'''ENABLED''' THEN\r\n        Variables.CreateNewList List=&gt; Identifiers\r\n        Excel.FindAndReplace.FindSingle Instance: AccompanySheet TextToFind: IdentifierRead MatchCase: False MatchEntireCellContents: True SearchBy: Excel.SearchOrder.Rows FoundColumnIndex=&gt; FoundColumnIndex\r\n        LOOP Row FROM 2 TO FirstFreeRow - 1 STEP 1\r\n            Excel.ReadFromExcel.ReadCell Instance: AccompanySheet StartColumn: FoundColumnIndex StartRow: Row ReadAsText: False CellValue=&gt; ExcelData\r\n            Variables.AddItemToList Item: ExcelData List: Identifiers\r\n        END\r\n    END\r\n    # We close the accompanying sheet now that we have extracted all data from it\r\n    Excel.CloseExcel.Close Instance: AccompanySheet\r\nEND FUNCTION\r\nFUNCTION Handler GLOBAL\r\n    # This loop duplicates the master file and renames them according to the accompanying sheet.\r\n    LOOP FOREACH FileName IN FileNames\r\n        File.Copy Files: MasterFilePath Destination: SavePath IfFileExists: File.IfExists.Overwrite CopiedFiles=&gt; CopiedFile\r\n        File.RenameFiles.Rename Files: CopiedFile NewName: FileName KeepExtension: True IfFileExists: File.IfExists.Overwrite\r\n    END\r\nEND FUNCTION\r\nFUNCTION Cutter GLOBAL\r\n    LOOP FOREACH FileName IN FileNames\r\n        # We start by finding which identifier is to be used for our file. To do this, we read our file name and search for the identifier within it.\r\n        LOOP FOREACH Identifier IN Identifiers\r\n            IF Contains(FileName, Identifier, True) THEN\r\n                SET CurrentIdentifier TO Identifier\r\n            END\r\n        END\r\n        WAIT 3\r\n        Excel.LaunchExcel.LaunchAndOpenUnderExistingProcess Path: $'''%SavePath%\\\\%FileName%.xlsx''' Visible: True ReadOnly: False Instance=&gt; HandlerSheet\r\n        # These keystrokes open the VBA editor, allowing us to paste in our previously created macro.\r\n        MouseAndKeyboard.SendKeys.FocusAndSendKeysByInstanceOrHandle WindowInstance: HandlerSheet TextToSend: $'''{Alt}({F11})''' DelayBetweenKeystrokes: 10 SendTextAsHardwareKeys: False\r\n        WAIT 1\r\n        MouseAndKeyboard.SendKeys.FocusAndSendKeys TextToSend: $'''{Alt}({I}{M})''' DelayBetweenKeystrokes: 10 SendTextAsHardwareKeys: False\r\n        WAIT 1\r\n        MouseAndKeyboard.SendKeys.FocusAndSendKeys TextToSend: $'''{Control}({V})''' DelayBetweenKeystrokes: 1 SendTextAsHardwareKeys: False\r\n        WAIT 1\r\n        MouseAndKeyboard.SendKeys.FocusAndSendKeys TextToSend: $'''{F5}''' DelayBetweenKeystrokes: 10 SendTextAsHardwareKeys: False\r\n        WAIT 1\r\n        MouseAndKeyboard.SendKeys.FocusAndSendKeys TextToSend: CurrentIdentifier DelayBetweenKeystrokes: 10 SendTextAsHardwareKeys: False\r\n        WAIT 3\r\n        MouseAndKeyboard.SendKeys.FocusAndSendKeys TextToSend: $'''{Return}''' DelayBetweenKeystrokes: 10 SendTextAsHardwareKeys: False\r\n        Excel.CloseExcel.CloseAndSave Instance: HandlerSheet\r\n        WAIT 3\r\n        # If there are columns or sheets to hide, we close and reopen the file to prevent issues with the macro and the following keystrokes.\r\n        # We use a counter to establish whether we need to re-launch excel after closing it (in the case that there is information to hide).\r\n        SET Counter TO 0\r\n        IF IsNotEmpty(ColumnsToHide) THEN\r\n            Variables.IncreaseVariable Value: Counter IncrementValue: 1\r\n        END\r\n        IF IsNotEmpty(SheetsToHide) THEN\r\n            Variables.IncreaseVariable Value: Counter IncrementValue: 1\r\n        END\r\n        IF Counter &lt;&gt; 0 THEN\r\n            WAIT 3\r\n            Excel.LaunchExcel.LaunchAndOpenUnderExistingProcess Path: $'''%SavePath%\\\\%FileName%.xlsx''' Visible: True ReadOnly: False Instance=&gt; HandlerSheet\r\n            # Here we hide chosen columns.\r\n            IF IsNotEmpty(ColumnsToHide) THEN\r\n                LOOP FOREACH ColumnToHide IN ColumnsToHide\r\n                    Text.CropText.CropTextBeforeFlag Text: ColumnToHide ToFlag: $'''$''' IgnoreCase: False CroppedText=&gt; ColumnToHideSheet\r\n                    Text.CropText.CropTextAfterFlag Text: ColumnToHide FromFlag: $'''$''' IgnoreCase: False CroppedText=&gt; ColumnToHideColumnKey\r\n                    Excel.SetActiveWorksheet.ActivateWorksheetByName Instance: HandlerSheet Name: ColumnToHideSheet\r\n                    Excel.GetFirstFreeColumnRow Instance: HandlerSheet FirstFreeColumn=&gt; FirstFreeColumn\r\n                    Variables.CreateNewList List=&gt; ColumnToHideColumns\r\n                    # We look through each column header on row 1 to see if it matches the column names we want to hide. If it matches, we add the column number to a list.\r\n                    LOOP Column FROM 1 TO FirstFreeColumn STEP 1\r\n                        Excel.ReadFromExcel.ReadCell Instance: HandlerSheet StartColumn: Column StartRow: 1 ReadAsText: False CellValue=&gt; BooleanTest\r\n                        IF BooleanTest = ColumnToHideColumnKey THEN\r\n                            Variables.AddItemToList Item: Column List: ColumnToHideColumns\r\n                        END\r\n                    END\r\n                    # We resize each column in the list to 0.001, 'hiding' it.\r\n                    LOOP FOREACH Column IN ColumnToHideColumns\r\n                        Excel.SelectCellsFromExcel.SelectCells Instance: HandlerSheet StartColumn: Column StartRow: 1 EndColumn: Column EndRow: 1\r\n                        WAIT 2\r\n                        MouseAndKeyboard.SendKeys.FocusAndSendKeysByInstanceOrHandle WindowInstance: HandlerSheet TextToSend: $'''{Control}({Space})''' DelayBetweenKeystrokes: 10 SendTextAsHardwareKeys: False\r\n                        WAIT 2\r\n                        MouseAndKeyboard.SendKeys.FocusAndSendKeysByInstanceOrHandle WindowInstance: HandlerSheet TextToSend: $'''{Control}(0)''' DelayBetweenKeystrokes: 10 SendTextAsHardwareKeys: False\r\n                        WAIT 2\r\n                    END\r\n                    Variables.ClearList List: ColumnToHideColumns\r\n                END\r\n            END\r\n            # Here we hide chosen sheets.\r\n            IF IsNotEmpty(SheetsToHide) THEN\r\n                LOOP FOREACH SheetToHide IN SheetsToHide\r\n                    Excel.SetActiveWorksheet.ActivateWorksheetByName Instance: HandlerSheet Name: SheetToHide\r\n                    WAIT 2\r\n                    MouseAndKeyboard.SendKeys.FocusAndSendKeysByInstanceOrHandle WindowInstance: HandlerSheet TextToSend: $'''{Alt}(H)''' DelayBetweenKeystrokes: 10 SendTextAsHardwareKeys: False\r\n                    WAIT 2\r\n                    MouseAndKeyboard.SendKeys.FocusAndSendKeysByInstanceOrHandle WindowInstance: HandlerSheet TextToSend: $'''O''' DelayBetweenKeystrokes: 10 SendTextAsHardwareKeys: False\r\n                    WAIT 2\r\n                    MouseAndKeyboard.SendKeys.FocusAndSendKeysByInstanceOrHandle WindowInstance: HandlerSheet TextToSend: $'''U''' DelayBetweenKeystrokes: 10 SendTextAsHardwareKeys: False\r\n                    WAIT 2\r\n                    MouseAndKeyboard.SendKeys.FocusAndSendKeysByInstanceOrHandle WindowInstance: HandlerSheet TextToSend: $'''S''' DelayBetweenKeystrokes: 10 SendTextAsHardwareKeys: False\r\n                    WAIT 2\r\n                END\r\n            END\r\n            Excel.CloseExcel.CloseAndSave Instance: HandlerSheet\r\n            WAIT 3\r\n        END\r\n    END\r\nEND FUNCTION\r\nFUNCTION Password GLOBAL\r\n    LOOP FOREACH FileName IN FileNames\r\n        WAIT 3\r\n        Excel.LaunchExcel.LaunchAndOpenUnderExistingProcess Path: $'''%SavePath%\\\\%FileName%.xlsx''' Visible: True ReadOnly: False Instance=&gt; PasswordSheet\r\n        # Here we use key strokes to 'protect' user chosen sheets, restricting edits.\r\n        IF IsNotEmpty(SheetsToProtect) THEN\r\n            LOOP FOREACH SheetToProtect IN SheetsToProtect\r\n                Excel.SetActiveWorksheet.ActivateWorksheetByName Instance: PasswordSheet Name: SheetToProtect\r\n                MouseAndKeyboard.SendKeys.FocusAndSendKeysByInstanceOrHandle WindowInstance: PasswordSheet TextToSend: $'''{Alt}(R)''' DelayBetweenKeystrokes: 10 SendTextAsHardwareKeys: False\r\n                WAIT 1\r\n                MouseAndKeyboard.SendKeys.FocusAndSendKeysByInstanceOrHandle WindowInstance: PasswordSheet TextToSend: $'''PS''' DelayBetweenKeystrokes: 10 SendTextAsHardwareKeys: False\r\n                WAIT 1\r\n                MouseAndKeyboard.SendKeys.FocusAndSendKeys TextToSend: ProtectSheetsPassword DelayBetweenKeystrokes: 20 SendTextAsHardwareKeys: False\r\n                WAIT 1\r\n                MouseAndKeyboard.SendKeys.FocusAndSendKeys TextToSend: $'''{Return}''' DelayBetweenKeystrokes: 20 SendTextAsHardwareKeys: False\r\n                WAIT 1\r\n                MouseAndKeyboard.SendKeys.FocusAndSendKeys TextToSend: ProtectSheetsPassword DelayBetweenKeystrokes: 20 SendTextAsHardwareKeys: False\r\n                WAIT 1\r\n                MouseAndKeyboard.SendKeys.FocusAndSendKeys TextToSend: $'''{Return}''' DelayBetweenKeystrokes: 20 SendTextAsHardwareKeys: False\r\n            END\r\n        END\r\n        # Here we use key strokes to 'protect' the workbook, restricting edits.\r\n        MouseAndKeyboard.SendKeys.FocusAndSendKeysByInstanceOrHandle WindowInstance: PasswordSheet TextToSend: $'''{Alt}(R)''' DelayBetweenKeystrokes: 10 SendTextAsHardwareKeys: False\r\n        WAIT 1\r\n        MouseAndKeyboard.SendKeys.FocusAndSendKeysByInstanceOrHandle WindowInstance: PasswordSheet TextToSend: $'''PW''' DelayBetweenKeystrokes: 10 SendTextAsHardwareKeys: False\r\n        WAIT 1\r\n        MouseAndKeyboard.SendKeys.FocusAndSendKeys TextToSend: ProtectWorkbookPassword DelayBetweenKeystrokes: 20 SendTextAsHardwareKeys: False\r\n        WAIT 1\r\n        MouseAndKeyboard.SendKeys.FocusAndSendKeys TextToSend: $'''{Return}''' DelayBetweenKeystrokes: 20 SendTextAsHardwareKeys: False\r\n        WAIT 1\r\n        MouseAndKeyboard.SendKeys.FocusAndSendKeys TextToSend: ProtectWorkbookPassword DelayBetweenKeystrokes: 20 SendTextAsHardwareKeys: False\r\n        WAIT 1\r\n        MouseAndKeyboard.SendKeys.FocusAndSendKeys TextToSend: $'''{Return}''' DelayBetweenKeystrokes: 20 SendTextAsHardwareKeys: False\r\n        # Here we encrypt the workbook so it requires a password to open.\r\n        MouseAndKeyboard.SendKeys.FocusAndSendKeysByInstanceOrHandle WindowInstance: PasswordSheet TextToSend: $'''{Alt}(F)''' DelayBetweenKeystrokes: 10 SendTextAsHardwareKeys: False\r\n        WAIT 1\r\n        MouseAndKeyboard.SendKeys.FocusAndSendKeysByInstanceOrHandle WindowInstance: PasswordSheet TextToSend: $'''I''' DelayBetweenKeystrokes: 10 SendTextAsHardwareKeys: False\r\n        WAIT 1\r\n        MouseAndKeyboard.SendKeys.FocusAndSendKeysByInstanceOrHandle WindowInstance: PasswordSheet TextToSend: $'''P''' DelayBetweenKeystrokes: 10 SendTextAsHardwareKeys: False\r\n        WAIT 1\r\n        MouseAndKeyboard.SendKeys.FocusAndSendKeysByInstanceOrHandle WindowInstance: PasswordSheet TextToSend: $'''E''' DelayBetweenKeystrokes: 20 SendTextAsHardwareKeys: False\r\n        WAIT 1\r\n        MouseAndKeyboard.SendKeys.FocusAndSendKeys TextToSend: EncryptWorkbookPassword DelayBetweenKeystrokes: 20 SendTextAsHardwareKeys: False\r\n        WAIT 1\r\n        MouseAndKeyboard.SendKeys.FocusAndSendKeys TextToSend: $'''{Return}''' DelayBetweenKeystrokes: 20 SendTextAsHardwareKeys: False\r\n        WAIT 1\r\n        MouseAndKeyboard.SendKeys.FocusAndSendKeys TextToSend: EncryptWorkbookPassword DelayBetweenKeystrokes: 20 SendTextAsHardwareKeys: False\r\n        WAIT 1\r\n        MouseAndKeyboard.SendKeys.FocusAndSendKeys TextToSend: $'''{Return}''' DelayBetweenKeystrokes: 20 SendTextAsHardwareKeys: False\r\n        WAIT 5\r\n        Excel.CloseExcel.CloseAndSave Instance: PasswordSheet\r\n    END\r\nEND FUNCTION\r\n"</Definition>
      <SchemaVersion>2022.06</SchemaVersion>
      <PrimaryEntity>none</PrimaryEntity>
      <LocalizedNames>
        <LocalizedName languagecode="1033" description="The Rewardian" />
      </LocalizedNames>
    </Workflow>
  </Workflows>
  <FieldSecurityProfiles></FieldSecurityProfiles>
  <Templates />
  <EntityMaps />
  <EntityRelationships />
  <OrganizationSettings />
  <optionsets />
  <CustomControls />
  <EntityDataProviders />
  <Languages>
    <Language>1033</Language>
  </Languages>
</ImportExportXml>